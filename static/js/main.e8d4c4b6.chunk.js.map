{"version":3,"sources":["assets/zixuLogo.svg","assets/githubBtnIcon.svg","assets/tensorflowIcon.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","cocoSsd","require","App","useState","modalState","setModalState","videoRef","React","createRef","canvasRef","detectFromVideoFrame","model","video","detect","then","predictions","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","score","toFixed","showDetections","requestAnimationFrame","error","console","log","useEffect","navigator","mediaDevices","getUserMedia","webcamPromise","audio","stream","window","srcObject","Promise","resolve","onloadedmetadata","loadModelPromise","load","all","values","catch","className","open","onClose","event","Title","Content","Action","passive","onClick","location","href","style","src","zixuLogo","alt","draggable","h4","h5","auto","githubBtnIcon","autoPlay","muted","ref","h6","tensorflowIcon","Boolean","hostname","match","ReactDOM","render","StrictMode","theme","type","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e8d4c4b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zixuLogo.e0852cb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubBtnIcon.92c90f33.svg\";","module.exports = __webpack_public_path__ + \"static/media/tensorflowIcon.65eb0388.svg\";","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport { Button, Modal, Text } from '@zeit-ui/react';\r\nimport zixuLogo from './assets/zixuLogo.svg';\r\nimport githubBtnIcon from './assets/githubBtnIcon.svg';\r\nimport tensorflowIcon from './assets/tensorflowIcon.svg';\r\nconst cocoSsd = require('@tensorflow-models/coco-ssd');\r\n\r\nfunction App() {\r\n    const [modalState, setModalState] = useState(false);\r\n    const handler = () => setModalState(true);\r\n    const closeHandler = (event) => {\r\n        setModalState(false)\r\n    };\r\n    const videoRef = React.createRef();\r\n    const canvasRef = React.createRef();\r\n\r\n    function showDetections( predictions ) {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        const font = \"24px helvetica\";\r\n        ctx.font = font;\r\n        ctx.textBaseline = \"top\";\r\n\r\n        predictions.forEach(prediction => {\r\n            const x = prediction.bbox[0];\r\n            const y = prediction.bbox[1];\r\n            const width = prediction.bbox[2];\r\n            const height = prediction.bbox[3];\r\n            ctx.strokeStyle = \"#2fff00\";\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeRect(x, y, width, height);\r\n            ctx.fillStyle = \"#2fff00\";\r\n            const textWidth = ctx.measureText(prediction.class).width;\r\n            const textHeight = parseInt(font, 10);\r\n            ctx.fillRect(x, y, textWidth, textHeight);\r\n            ctx.fillRect(x, y + height - textHeight, textWidth, textHeight);\r\n\r\n            ctx.fillStyle = \"#000000\";\r\n            ctx.fillText(prediction.class, x, y);\r\n            ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\r\n        });\r\n    }\r\n\r\n    function detectFromVideoFrame(model, video) {\r\n        model.detect(video).then(predictions => {\r\n            showDetections(predictions);\r\n            requestAnimationFrame(() => {\r\n                detectFromVideoFrame(model, video);\r\n            });\r\n        }, (error) => {\r\n            console.log(\"Couldn't start the webcam.\");\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (navigator.mediaDevices.getUserMedia) {\r\n            const webcamPromise = navigator.mediaDevices\r\n                .getUserMedia({\r\n                    video: true,\r\n                    audio: false,\r\n                })\r\n                .then(stream => {\r\n                    window.stream = stream;\r\n                    videoRef.current.srcObject = stream;\r\n\r\n                    return new Promise(resolve => {\r\n                        videoRef.current.onloadedmetadata = () => {\r\n                            resolve();\r\n                        };\r\n                    });\r\n                }, (error) => {\r\n                    console.log(\"Couldn't start the webcam\");\r\n                    console.error(error);\r\n                });\r\n\r\n            const loadModelPromise = cocoSsd.load();\r\n\r\n            Promise.all([loadModelPromise, webcamPromise])\r\n                .then(values => {\r\n                    detectFromVideoFrame(values[0], videoRef.current);\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <Modal open={modalState} onClose={closeHandler}>\r\n                <Modal.Title>Warning</Modal.Title>\r\n                <Modal.Content>\r\n                    <p>You'll be redirected to GitHub.</p>\r\n                </Modal.Content>\r\n                <Modal.Action passive>Cancel</Modal.Action>\r\n                <Modal.Action onClick={() => {window.location.href = 'https://github.com/genesis331/objectdetection';}}>OK</Modal.Action>\r\n            </Modal>\r\n            <section className=\"header\">\r\n                <div className=\"header-grid\">\r\n                    <div style={{'textAlign': 'left','height': '100%'}}>\r\n                        <div className=\"header-contents\">\r\n                            <img src={zixuLogo} alt=\"zixuLogo\" draggable={false} style={{'height': '2.8rem','verticalAlign': 'middle','marginRight': '2rem'}}/>\r\n                            <div style={{'display': 'inline-block','verticalAlign': 'middle'}}>\r\n                                <Text h4 style={{'fontFamily': 'Volte Bold', 'margin': '0'}}>AI Experiments</Text>\r\n                                <Text h5 style={{'margin': '0'}}>TFJS Experiment - Object Detection</Text>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{'textAlign': 'right','height': '100%'}}>\r\n                        <div className=\"header-contents\">\r\n                            <Button auto onClick={handler}><img src={githubBtnIcon} alt=\"moon\" style={{'height': '1rem','verticalAlign': 'middle','paddingRight': '0.5rem'}}/><span style={{'verticalAlign': 'middle'}}> See Page Source Code</span></Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"video-canvas\">\r\n                <div className=\"video-canvas-box\">\r\n                    <video\r\n                        autoPlay\r\n                        muted\r\n                        ref={videoRef}\r\n                        width=\"720\"\r\n                        height=\"500\"\r\n                    />\r\n                </div>\r\n                <div className=\"video-canvas-box\">\r\n                    <canvas ref={canvasRef} width=\"720\" height=\"500\" />\r\n                </div>\r\n            </section>\r\n            <section className=\"footer\">\r\n                <div className=\"footer-grid\">\r\n                    <div style={{'textAlign': 'left','height': '100%'}}>\r\n                        <div className=\"footer-contents\">\r\n                            <Text h6>\r\n                                Note: This project runs on the client side ONLY, which means that nobody else will be able to see or record the image coming from your webcam.\r\n                            </Text>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{'textAlign': 'right','height': '100%'}}>\r\n                        <div className=\"footer-contents\">\r\n                            <img src={tensorflowIcon} alt=\"tensorflowIcon\" draggable={false} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ZEITUIProvider, CSSBaseline } from '@zeit-ui/react';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ZEITUIProvider theme={{type: 'dark'}}>\n            <CSSBaseline />\n            <App />\n        </ZEITUIProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}