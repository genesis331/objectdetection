{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/zixuLogo.svg","assets/githubBtnIcon.svg"],"names":["App","useState","modalState","setModalState","className","open","onClose","event","Title","Content","Action","passive","onClick","window","location","href","style","src","zixuLogo","alt","draggable","h4","h5","auto","githubBtnIcon","h6","Boolean","hostname","match","ReactDOM","render","StrictMode","theme","type","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sQA0DeA,MApDf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACJC,EADI,KACQC,EADR,KAMX,OACI,yBAAKC,UAAU,WACX,kBAAC,QAAD,CAAOC,KAAMH,EAAYI,QALZ,SAACC,GAClBJ,GAAc,KAKN,kBAAC,QAAMK,MAAP,gBACA,kBAAC,QAAMC,QAAP,KACI,+DAEJ,kBAAC,QAAMC,OAAP,CAAcC,SAAO,GAArB,UACA,kBAAC,QAAMD,OAAP,CAAcE,QAAS,WAAOC,OAAOC,SAASC,KAAO,kDAArD,OAEJ,6BAASX,UAAU,UACf,yBAAKA,UAAU,eACX,yBAAKY,MAAO,CAAC,UAAa,OAAO,OAAU,SACvC,yBAAKZ,UAAU,mBACX,yBAAKa,IAAKC,IAAUC,IAAI,WAAWC,WAAW,EAAOJ,MAAO,CAAC,OAAU,SAAS,cAAiB,SAAS,YAAe,UACzH,yBAAKA,MAAO,CAAC,QAAW,eAAe,cAAiB,WACpD,kBAAC,OAAD,CAAMK,IAAE,EAACL,MAAO,CAAC,WAAc,aAAc,OAAU,MAAvD,kBACA,kBAAC,OAAD,CAAMM,IAAE,EAACN,MAAO,CAAC,OAAU,MAA3B,yCAIZ,yBAAKA,MAAO,CAAC,UAAa,QAAQ,OAAU,SACxC,yBAAKZ,UAAU,mBACX,kBAAC,SAAD,CAAQmB,MAAI,EAACX,QA3BrB,kBAAMT,GAAc,KA2BmB,yBAAKc,IAAKO,IAAeL,IAAI,OAAOH,MAAO,CAAC,OAAU,OAAO,cAAiB,SAAS,aAAgB,YAAY,0BAAMA,MAAO,CAAC,cAAiB,WAA/B,8BAKlK,6BAASZ,UAAU,UACf,yBAAKA,UAAU,eACX,yBAAKY,MAAO,CAAC,UAAa,OAAO,OAAU,SACvC,yBAAKZ,UAAU,mBACX,kBAAC,OAAD,CAAMqB,IAAE,MAGhB,yBAAKT,MAAO,CAAC,UAAa,QAAQ,OAAU,SACxC,yBAAKZ,UAAU,yBCpCnBsB,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,iBAAD,CAAgBC,MAAO,CAACC,KAAM,SAC1B,kBAAC,cAAD,MACA,kBAAC,EAAD,QAGRC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,sC,kBCA3CD,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.30383553.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Button, Modal, Text } from '@zeit-ui/react';\nimport zixuLogo from './assets/zixuLogo.svg';\nimport githubBtnIcon from './assets/githubBtnIcon.svg';\n\nfunction App() {\n    const [modalState, setModalState] = useState(false);\n    const handler = () => setModalState(true);\n    const closeHandler = (event) => {\n        setModalState(false)\n    };\n    return (\n        <div className=\"content\">\n            <Modal open={modalState} onClose={closeHandler}>\n                <Modal.Title>Warning</Modal.Title>\n                <Modal.Content>\n                    <p>You'll be redirected to GitHub.</p>\n                </Modal.Content>\n                <Modal.Action passive>Cancel</Modal.Action>\n                <Modal.Action onClick={() => {window.location.href = 'https://github.com/genesis331/objectdetection';}}>OK</Modal.Action>\n            </Modal>\n            <section className=\"header\">\n                <div className=\"header-grid\">\n                    <div style={{'textAlign': 'left','height': '100%'}}>\n                        <div className=\"header-contents\">\n                            <img src={zixuLogo} alt=\"zixuLogo\" draggable={false} style={{'height': '2.8rem','verticalAlign': 'middle','marginRight': '2rem'}}/>\n                            <div style={{'display': 'inline-block','verticalAlign': 'middle'}}>\n                                <Text h4 style={{'fontFamily': 'Volte Bold', 'margin': '0'}}>AI Experiments</Text>\n                                <Text h5 style={{'margin': '0'}}>TFJS Experiment - Object Detection</Text>\n                            </div>\n                        </div>\n                    </div>\n                    <div style={{'textAlign': 'right','height': '100%'}}>\n                        <div className=\"header-contents\">\n                            <Button auto onClick={handler}><img src={githubBtnIcon} alt=\"moon\" style={{'height': '1rem','verticalAlign': 'middle','paddingRight': '0.5rem'}}/><span style={{'verticalAlign': 'middle'}}> See Page Source Code</span></Button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            <section className=\"footer\">\n                <div className=\"footer-grid\">\n                    <div style={{'textAlign': 'left','height': '100%'}}>\n                        <div className=\"footer-contents\">\n                            <Text h6></Text>\n                        </div>\n                    </div>\n                    <div style={{'textAlign': 'right','height': '100%'}}>\n                        <div className=\"footer-contents\">\n\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ZEITUIProvider, CSSBaseline } from '@zeit-ui/react';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ZEITUIProvider theme={{type: 'dark'}}>\n            <CSSBaseline />\n            <App />\n        </ZEITUIProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/zixuLogo.e0852cb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubBtnIcon.92c90f33.svg\";"],"sourceRoot":""}